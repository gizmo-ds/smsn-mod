plugins {
    id 'com.github.johnrengelman.shadow'
}

loom {
    forge {
        mixinConfig "smsn-common.mixins.json"
        mixinConfig "smsn.mixins.json"
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = 'tterag maven'
        url = 'https://maven.tterrag.com/'
    }
}

dependencies {
    forge "net.minecraftforge:forge:$rootProject.forge_version"

    localRuntime("io.github.llamalad7:mixinextras-forge:0.3.6")
    modImplementation "maven.modrinth:quark:$rootProject.quark_version"
    modLocalRuntime "maven.modrinth:zeta:$rootProject.zeta_version"
    modImplementation "maven.modrinth:alexs-caves:$rootProject.alexs_caves_version"
    modImplementation "maven.modrinth:citadel:$rootProject.citadel_version"
    modLocalRuntime "maven.modrinth:xaeros-minimap:$rootProject.xaeros_minimap_forge_version"
    modLocalRuntime "maven.modrinth:xaeros-world-map:$rootProject.xaeros_world_map_forge_version"
    modImplementation "maven.modrinth:petrolpark:$rootProject.petrolpark_version"
    modLocalRuntime("com.simibubi.create:create-$rootProject.minecraft_version:$rootProject.create_version:slim") { transitive = false }
    modLocalRuntime "com.jozufozu.flywheel:flywheel-forge-$rootProject.minecraft_version:$rootProject.flywheel_version"
    modLocalRuntime "com.tterrag.registrate:Registrate:$rootProject.registrate_version"
    modLocalRuntime "dev.latvian.mods:kubejs-forge:$rootProject.kubejs_version"
    modImplementation "maven.modrinth:inventory-profiles-next:$rootProject.ipn_forge_version"
    modImplementation "maven.modrinth:obscure-api:$rootProject.obscure_api_forge_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionForge')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/mods.toml') {
        expand version: project.version
    }
    from(rootProject.file("assets/icon.png")) {
        rename { "$rootProject.archives_name-icon.png" }
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
